(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{106:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,b=d["".concat(o,".").concat(m)]||d[m]||p[m]||c;return n?a.a.createElement(b,i(i({ref:t},l),{},{components:n})):a.a.createElement(b,i({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<c;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),c=(n(0),n(106)),o=["components"],i={title:"Interacting with on-chain contract"},s={unversionedId:"SmartContracts/Interacting-with-on-chain-contract",id:"SmartContracts/Interacting-with-on-chain-contract",isDocsHomePage:!1,title:"Interacting with on-chain contract",description:"Initialize",source:"@site/docs/SmartContracts/Interacting-with-on-chain-contract.md",slug:"/SmartContracts/Interacting-with-on-chain-contract",permalink:"/SmartContracts/Interacting-with-on-chain-contract",editUrl:"https://github.com/IDEP-network/IDEP-Docs/docs/SmartContracts/Interacting-with-on-chain-contract.md",version:"current",sidebar:"docs",previous:{title:"Obtain, Compile, Upload",permalink:"/SmartContracts/Obtain-Compile-Upload"},next:{title:"Validators Overview",permalink:"/Validators/ValidatorsOverview"}},l=[{value:"Initialize",id:"initialize",children:[]}],u={toc:l};function d(e){var t=e.components,n=Object(a.a)(e,o);return Object(c.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"initialize"},"Initialize"),Object(c.b)("p",null,"First you need to create the init message. You can either create json file with text editor, or do it directly in a terminal, like this:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'INIT=\'{"purchase_price":{"amount":"100","denom":"idep"},"transfer_price":{"amount":"999","denom":"idep"}}\'\n')),Object(c.b)("p",null,"Now we can instantiate the contract:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'iond tx wasm instantiate $CODE_ID "$INIT" --from wallet1 --label "test contract deployment" $TXFLAGS -y\n')),Object(c.b)("p",null,"Get deployed contracts address and save it:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"iond query wasm list-contract-by-code $CODE_ID --output json\nCONTRACT=$(iond query wasm list-contract-by-code $CODE_ID  --output json | jq -r '.contracts[-1]')\necho $CONTRACT\n")),Object(c.b)("p",null,"Now, some  query operations:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"iond query wasm contract $CONTRACT\niond query bank balances $CONTRACT\n\n# dump whole contract state\niond query wasm contract-state all $CONTRACT\n\n# Keys are in hex format whilevalue is in base64.\n# To view returnted data:\n# (Though in certain cases the binary returneed is not ascii, hence thee encoding)\niond query wasm contract-state all $CONTRACT  --output \"json\" | jq -r '.models[0].key' | xxd -r -ps\niond query wasm contract-state all $CONTRACT  --output \"json\" | jq -r '.models[0].value' | base64 -d\n\n# or try a \"smart query\", executing against the contract\niond query wasm contract-state smart $CONTRACT '{}'\n# (since we didn't implement any valid QueryMsg, we just get a parse error back)\n")),Object(c.b)("p",null,"Once contract instance is created, we can register a name and transfer it, paying the price:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'# in case the e person is incorrect the execute will fail\nREGISTER=\'{"register":{"name":"fred"}}\'\niond tx wasm execute $CONTRACT "$REGISTER" \\\n    --amount 100idep \\\n    --from wallet $TXFLAGS -y\n\n# query name\nNAME_QUERY=\'{"resolve_record": {"name": "fred"}}\'\niond query wasm contract-state smart $CONTRACT "$NAME_QUERY"  --output json\n# {"data":{"address":"idep1awadyj4c5xrhaqsmk36yr9dgt2z57wcedf5s39"}}\n\n# purchase and then transfer the name record to wallet2 (change the "to" address to wallet2\'s address which was generated in previous steps)\nTRANSFER=\'{"transfer":{"name":"fred","to":"idep1t4drw35er7lwlkyje3gwsnwehgwqaj77kl6mpc"}}\'\niond tx wasm execute $CONTRACT "$TRANSFER" \\\n    --amount 999idep \\\n    --from wallet $TXFLAGS -y\n')),Object(c.b)("p",null,"Check contract's new owner:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'NAME_QUERY=\'{"resolve_record": {"name": "fred"}}\'\niond query wasm contract-state smart $CONTRACT "$NAME_QUERY"  --output json\n# {"data":{"address":"idep1t4drw35er7lwlkyje3gwsnwehgwqaj77kl6mpc"}}\n')))}d.isMDXComponent=!0}}]);
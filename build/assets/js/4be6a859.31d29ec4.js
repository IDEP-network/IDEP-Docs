"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[737],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,w=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(w,c(c({ref:t},u),{},{components:n})):r.createElement(w,c({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2572:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),c=["components"],i={title:"Interacting with on-chain contract"},s=void 0,l={unversionedId:"Developers/Interacting-with-on-chain-contract",id:"Developers/Interacting-with-on-chain-contract",title:"Interacting with on-chain contract",description:"Initialize",source:"@site/docs/Developers/Interacting-with-on-chain-contract.md",sourceDirName:"Developers",slug:"/Developers/Interacting-with-on-chain-contract",permalink:"/docs/Developers/Interacting-with-on-chain-contract",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Developers/Interacting-with-on-chain-contract.md",tags:[],version:"current",frontMatter:{title:"Interacting with on-chain contract"},sidebar:"Docs",previous:{title:"Obtain, Compile, Upload",permalink:"/docs/Developers/Obtain-Compile-Upload"},next:{title:"Validators Overview",permalink:"/docs/Validators/ValidatorsOverview"}},u={},p=[{value:"Initialize",id:"initialize",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"initialize"},"Initialize"),(0,o.kt)("p",null,"First you need to create the init message. You can either create json file with text editor, or do it directly in a terminal, like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'INIT=\'{"purchase_price":{"amount":"100","denom":"idep"},"transfer_price":{"amount":"999","denom":"idep"}}\'\n')),(0,o.kt)("p",null,"Now we can instantiate the contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'iond tx wasm instantiate $CODE_ID "$INIT" --from wallet1 --label "test contract deployment" $TXFLAGS -y\n')),(0,o.kt)("p",null,"Get deployed contracts address and save it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"iond query wasm list-contract-by-code $CODE_ID --output json\nCONTRACT=$(iond query wasm list-contract-by-code $CODE_ID  --output json | jq -r '.contracts[-1]')\necho $CONTRACT\n")),(0,o.kt)("p",null,"Now, some  query operations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"iond query wasm contract $CONTRACT\niond query bank balances $CONTRACT\n\n# dump whole contract state\niond query wasm contract-state all $CONTRACT\n\n# Keys are in hex format whilevalue is in base64.\n# To view returnted data:\n# (Though in certain cases the binary returneed is not ascii, hence thee encoding)\niond query wasm contract-state all $CONTRACT  --output \"json\" | jq -r '.models[0].key' | xxd -r -ps\niond query wasm contract-state all $CONTRACT  --output \"json\" | jq -r '.models[0].value' | base64 -d\n\n# or try a \"smart query\", executing against the contract\niond query wasm contract-state smart $CONTRACT '{}'\n# (since we didn't implement any valid QueryMsg, we just get a parse error back)\n")),(0,o.kt)("p",null,"Once contract instance is created, we can register a name and transfer it, paying the price:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# in case the e person is incorrect the execute will fail\nREGISTER=\'{"register":{"name":"fred"}}\'\niond tx wasm execute $CONTRACT "$REGISTER" \\\n    --amount 100idep \\\n    --from wallet $TXFLAGS -y\n\n# query name\nNAME_QUERY=\'{"resolve_record": {"name": "fred"}}\'\niond query wasm contract-state smart $CONTRACT "$NAME_QUERY"  --output json\n# {"data":{"address":"idep1awadyj4c5xrhaqsmk36yr9dgt2z57wcedf5s39"}}\n\n# purchase and then transfer the name record to wallet2 (change the "to" address to wallet2\'s address which was generated in previous steps)\nTRANSFER=\'{"transfer":{"name":"fred","to":"idep1t4drw35er7lwlkyje3gwsnwehgwqaj77kl6mpc"}}\'\niond tx wasm execute $CONTRACT "$TRANSFER" \\\n    --amount 999idep \\\n    --from wallet $TXFLAGS -y\n')),(0,o.kt)("p",null,"Check contract's new owner:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'NAME_QUERY=\'{"resolve_record": {"name": "fred"}}\'\niond query wasm contract-state smart $CONTRACT "$NAME_QUERY"  --output json\n# {"data":{"address":"idep1t4drw35er7lwlkyje3gwsnwehgwqaj77kl6mpc"}}\n')))}m.isMDXComponent=!0}}]);
{"remainingRequest":"/Users/aidas/Desktop/Docs/IDEP-Docs/node_modules/babel-loader/lib/index.js??ref--12-1!/Users/aidas/Desktop/Docs/IDEP-Docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/Users/aidas/Desktop/Docs/IDEP-Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--12-3!/Users/aidas/Desktop/Docs/IDEP-Docs/docs/Uptake.md","dependencies":[{"path":"/Users/aidas/Desktop/Docs/IDEP-Docs/docs/Uptake.md","mtime":1641922313437},{"path":"/Users/aidas/Desktop/Docs/IDEP-Docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-uptake-md-177.json","mtime":1641933431132},{"path":"/Users/aidas/Desktop/Docs/IDEP-Docs/node_modules/cache-loader/dist/cjs.js","mtime":1641922314209},{"path":"/Users/aidas/Desktop/Docs/IDEP-Docs/node_modules/babel-loader/lib/index.js","mtime":1641922314159},{"path":"/Users/aidas/Desktop/Docs/IDEP-Docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1641922313926},{"path":"/Users/aidas/Desktop/Docs/IDEP-Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1641922313937}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
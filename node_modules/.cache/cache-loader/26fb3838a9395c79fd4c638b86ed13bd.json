{"remainingRequest":"/Users/aidas/Desktop/IDEP-Docs/node_modules/babel-loader/lib/index.js??ref--12-1!/Users/aidas/Desktop/IDEP-Docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/Users/aidas/Desktop/IDEP-Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--12-3!/Users/aidas/Desktop/IDEP-Docs/docs/Litepaper.md","dependencies":[{"path":"/Users/aidas/Desktop/IDEP-Docs/docs/Litepaper.md","mtime":1618011611260},{"path":"/Users/aidas/Desktop/IDEP-Docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-litepaper-md-d03.json","mtime":1618011756205},{"path":"/Users/aidas/Desktop/IDEP-Docs/node_modules/cache-loader/dist/cjs.js","mtime":1617909358812},{"path":"/Users/aidas/Desktop/IDEP-Docs/node_modules/babel-loader/lib/index.js","mtime":1617909358745},{"path":"/Users/aidas/Desktop/IDEP-Docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1617909370487},{"path":"/Users/aidas/Desktop/IDEP-Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1617909370208}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
{"remainingRequest":"/home/robinzon/code/Oxeni/projects/IDEP-Docs/node_modules/babel-loader/lib/index.js??ref--12-1!/home/robinzon/code/Oxeni/projects/IDEP-Docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/home/robinzon/code/Oxeni/projects/IDEP-Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--12-3!/home/robinzon/code/Oxeni/projects/IDEP-Docs/docs/Litepaper.md","dependencies":[{"path":"/home/robinzon/code/Oxeni/projects/IDEP-Docs/docs/Litepaper.md","mtime":1618056045190},{"path":"/home/robinzon/code/Oxeni/projects/IDEP-Docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-litepaper-md-d03.json","mtime":1618070411640},{"path":"/home/robinzon/code/Oxeni/projects/IDEP-Docs/node_modules/cache-loader/dist/cjs.js","mtime":1618056045500},{"path":"/home/robinzon/code/Oxeni/projects/IDEP-Docs/node_modules/babel-loader/lib/index.js","mtime":1618056045470},{"path":"/home/robinzon/code/Oxeni/projects/IDEP-Docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1618056045330},{"path":"/home/robinzon/code/Oxeni/projects/IDEP-Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1618056045350}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvcm9iaW56b24vY29kZS9PeGVuaS9wcm9qZWN0cy9JREVQLURvY3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyPXt0aXRsZTonSURFUCBMaXRlcGFwZXInfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiTGl0ZXBhcGVyIiwiaWQiOiJMaXRlcGFwZXIiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiSURFUCBMaXRlcGFwZXIiLCJkZXNjcmlwdGlvbiI6ImNvdmVyaW1hZ2UiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL0xpdGVwYXBlci5tZCIsInNsdWciOiIvTGl0ZXBhcGVyIiwicGVybWFsaW5rIjoiL0xpdGVwYXBlciIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vSURFUC1uZXR3b3JrL0lERVAtRG9jcy9kb2NzL0xpdGVwYXBlci5tZCIsInZlcnNpb24iOiJjdXJyZW50Iiwic2lkZWJhciI6ImRvY3MiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IldlbGNvbWUiLCJwZXJtYWxpbmsiOiIvIn0sIm5leHQiOnsidGl0bGUiOiJJUEZTLVByaXZhdGUtTmV0d29yayIsInBlcm1hbGluayI6Ii9JUEZTIn19Oy8qIEBqc3hSdW50aW1lIGNsYXNzaWMgKi8gLyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgdG9jPVt7dmFsdWU6J0ludHJvZHVjdGlvbicsaWQ6J2ludHJvZHVjdGlvbicsY2hpbGRyZW46W119LHt2YWx1ZTonRm91bmRhdGlvbmFsIE1vZHVsZXMnLGlkOidmb3VuZGF0aW9uYWwtbW9kdWxlcycsY2hpbGRyZW46W3t2YWx1ZTonVXB0YWtlJyxpZDondXB0YWtlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidJREVOVFQnLGlkOidpZGVudHQnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0lERVAgU3dhcCcsaWQ6J2lkZXAtc3dhcCcsY2hpbGRyZW46W119XX0se3ZhbHVlOidQcm9qZWN0IGZlYXR1cmVzJyxpZDoncHJvamVjdC1mZWF0dXJlcycsY2hpbGRyZW46W3t2YWx1ZTonTGF5ZXIgMScsaWQ6J2xheWVyLTEnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0ludGVyb3BlcmFiaWxpdHknLGlkOidpbnRlcm9wZXJhYmlsaXR5JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidFVk0nLGlkOidldm0nLGNoaWxkcmVuOltdfV19LHt2YWx1ZTonSURFUCBUb2tlbm9taWNzJyxpZDonaWRlcC10b2tlbm9taWNzJyxjaGlsZHJlbjpbe3ZhbHVlOidCYXNpYyBJbmZvcm1hdGlvbicsaWQ6J2Jhc2ljLWluZm9ybWF0aW9uJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J0dvdmVybmFuY2UnLGlkOidnb3Zlcm5hbmNlJyxjaGlsZHJlbjpbe3ZhbHVlOidTdW1tYXJ5JyxpZDonc3VtbWFyeScsY2hpbGRyZW46W119LHt2YWx1ZTonU2NvcGUgb2YgR292ZXJuYW5jZScsaWQ6J3Njb3BlLW9mLWdvdmVybmFuY2UnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0dhbGFjdGljIEltcHJvdmVtZW50IFByb3Bvc2FsIChHSVApJyxpZDonZ2FsYWN0aWMtaW1wcm92ZW1lbnQtcHJvcG9zYWwtZ2lwJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidHYWxhY3RpYyBNZXRyaWNzIFByb3Bvc2FsIChHTVApJyxpZDonZ2FsYWN0aWMtbWV0cmljcy1wcm9wb3NhbC1nbXAnLGNoaWxkcmVuOltdfV19LHt2YWx1ZTonUm9hZG1hcCcsaWQ6J3JvYWRtYXAnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0xvb2tpbmcgQWhlYWQnLGlkOidsb29raW5nLWFoZWFkJyxjaGlsZHJlbjpbXX1dO2NvbnN0IGxheW91dFByb3BzPXt0b2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgicCIsbnVsbCxtZHgoImltZyIse2FsdDoiY292ZXJpbWFnZSIsc3JjOnJlcXVpcmUoIiF1cmwtbG9hZGVyP2xpbWl0PTEwMDAwJm5hbWU9YXNzZXRzL2ltYWdlcy9bbmFtZV0tW2hhc2hdLltleHRdJmZhbGxiYWNrPWZpbGUtbG9hZGVyIS9ob21lL3JvYmluem9uL2NvZGUvT3hlbmkvcHJvamVjdHMvSURFUC1Eb2NzL3N0YXRpYy9pbWcvY292ZXJpbWFnZS5wbmciKS5kZWZhdWx0fSkpLG1keCgiaDIiLHsiaWQiOiJpbnRyb2R1Y3Rpb24ifSxgSW50cm9kdWN0aW9uYCksbWR4KCJwIixudWxsLGBJREVQIGlzIGFuIE5GVDIuMCBCbG9ja2NoYWluIHRoYXQgZm9jdXNlcyBvbiBkZWNlbnRyYWxpemVkIGRpZ2l0YWwgbWVkaWEuIEl0IGlzIGJ1aWx0IHVzaW5nIHRoZSBUZW5kZXJtaW50IGNvbnNlbnN1cyBlbmdpbmUKYW5kIENvc21vcyBTREsuIElERVAgd2lsbCBsYXVuY2ggd2l0aCAzIG1haW4gZm91bmRhdGlvbmFsIG1vZGVscyB0byBraWNrIHN0YXJ0IHRoZSBlY29zeXN0ZW0uIFVwdGFrZSAtIHRoZSBuZXh0IGdlbmVyYXRpb24KTkZUMi4wIHBsYXRmb3JtLCBJREVOVFQgLSBhIGh5cGVyIGV4dGVuc2libGUgb24tY2hhaW4gcHJvZmlsZSwgYW5kIElERVAtU3dhcCAtIGFuIEFNTSBzd2FwIGFuZCBtYXJrZXRwbGFjZSBmb3IgZGlnaXRhbCBhc3NldHMuCklERVAgaXMgdGhlIG5hdGl2ZSB1dGlsaXR5IHRva2VuIG9mIHRoZSBJREVQIE5ldHdvcmsuYCksbWR4KCJwIixudWxsLGBUaGUgSURFUCBOZXR3b3JrIGlzIGJlaW5nIGRldmVsb3BlZCBieSB0aGUgSURFUCBGb3VuZGF0aW9uLiBUaGUgSURFUCBGb3VuZGF0aW9uIHdpbGwgZmFjaWxpdGF0ZSB0aGUgZWFybHktc3RhZ2UgZGV2ZWxvcG1lbnQKb2YgdGhlIGJsb2NrY2hhaW4sIGJ5IGNyZWF0aW5nIHRoZSBwcmVtaWVyIGRpZ2l0YWwgbWVkaWEgZm9jdXNlZCBlY29zeXN0ZW0uIFVsdGltYXRlbHksIHRoZSB2aXNpb24gaXMgZm9yIHRoZSBJREVQIE5ldHdvcmsKdG8gYmVjb21lIHRoZSBiaWdnZXN0IGNvbW11bml0eSBnb3Zlcm5lZCBORlQgYmxvY2tjaGFpbi5gKSxtZHgoImgyIix7ImlkIjoiZm91bmRhdGlvbmFsLW1vZHVsZXMifSxgRm91bmRhdGlvbmFsIE1vZHVsZXNgKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6ImFyY2hpdGVjdHVyZSIsc3JjOnJlcXVpcmUoIiF1cmwtbG9hZGVyP2xpbWl0PTEwMDAwJm5hbWU9YXNzZXRzL2ltYWdlcy9bbmFtZV0tW2hhc2hdLltleHRdJmZhbGxiYWNrPWZpbGUtbG9hZGVyIS9ob21lL3JvYmluem9uL2NvZGUvT3hlbmkvcHJvamVjdHMvSURFUC1Eb2NzL3N0YXRpYy9pbWcvYXJjaGl0ZWN0dXJlLnBuZyIpLmRlZmF1bHR9KSksbWR4KCJoMyIseyJpZCI6InVwdGFrZSJ9LGBVcHRha2VgKSxtZHgoInAiLG51bGwsYFVwdGFrZSBpcyBJREVQ4oCZcyBvbmUtc3RvcCBORlQgbmF0aXZlIG1vZHVsZS4gVXB0YWtlIHdpbGwgYWxsb3cgY3JlYXRvcnMgdG8gcXVpY2tseSBtaW50IGFueSBmb3JtIG9mIE5GVC4gVGhlIFVwdGFrZSBpbnRlcmZhY2UKd2lsbCBjb21lIGluIDIgZmxhdm9ycy4gRmlyc3QsIHRoZXJlIGlzIGFuIGVsZWdhbnQgVUkvVVggZm9yIGV2ZXJ5ZGF5IHVzZS4gU2Vjb25kLCBhIG1vcmUgZXh0ZW5zaWJsZSBTREsgdmVyc2lvbiB3aWxsIGJlCmRlcGxveWVkIGFsbG93aW5nIGRldmVsb3BlcnMgdG8gY3JlYXRlIGludHJpY2F0ZSB2ZXJzaW9ucyBvZiBORlRzIHJlYWR5IHRvIG5hdGl2ZWx5IGludGVncmF0ZSBpbnRvIHRoZWlyIGdhbWVzIGFuZCBkYXBwcy4KVXB0YWtlIGFsbG93cyB1c2VycyB0byB0YWtlIGFkdmFudGFnZSBvZiBhbiBleHRyZW1lbHkgZGVzY3JpcHRpdmUgTkZUMi4wIHN0YW5kYXJkLiBXaXRoIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBhbgpleHRlbnNpdmUga2V5c3RvcmUgdmFsdWUgKHdpdGggdGhlIGFiaWxpdHkgdG8gcmVmZXJlbmNlIG9mZi1jaGFpbiBhbmQgb24tY2hhaW4gZmlsZXMgaW4gdGhlIE5GVDIuMCBzdGFuZGFyZCkgVXB0YWtlIGFsbG93cwp1c2VycyB0byBjb25zdHJ1Y3QgYW5kIGh5YnJpZGl6ZSB2YXJpb3VzIHZlcnNpb25zIG9mIHBoeXNpY2FsIGFuZCBkaWdpdGFsIE5GVOKAmXMuIE9uY2UgdGhlIG1pbnRpbmcgaXMgY29tcGxldGUsIHRoZSBvd25lcgppcyB0aGVuIGFibGUgdG8gY29tcGxldGVseSBjdXN0b21pemUgaGlzIG9yIGhlciB0b2tlbnMuIFRoZSBjdXN0b21pemFiaWxpdHkgb2YgdG9rZW5zIG1lYW5zIHRoYXQgY3JlYXRvcnMgYXJlIGZyZWUgdG8gZGVjaWRlCnVwb24gdGhlaXIgZnVuY3Rpb25hbGl0eSwgdG90YWwgc3VwcGx5LCB0YXJnZXQgcmVjaXBpZW50cywgbmFtZSwgYW5kIGJyYW5kaW5nLmApLG1keCgicCIsbnVsbCxgS2V5IEZlYXR1cmVzYCksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgU3VwcG9ydCBmb3IgbGVnYWN5IE5GVCBjcmVhdGlvbmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBBYmlsaXR5IHRvIG1pbnQgTkZUMi4wYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEludGVsbGVjdHVhbCBzbWFydCBjb250cmFjdCBsYXllciBpbnRlZ3JhdGlvbmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBEZXZlbG9wZXIgU0RLYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYE5GVDIuMCBHYW1pZmljYXRpb25gKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgUGh5c2ljYWwgTkZUMi4wYCkpLG1keCgiaDMiLHsiaWQiOiJpZGVudHQifSxgSURFTlRUYCksbWR4KCJwIixudWxsLGBJREVOVFQgaXMgYW4gb3Blbi1zb3VyY2UgbGlnaHR3ZWlnaHQgc3RhbmRhcmQgdGhhdCB3aWxsIGFsbG93IGZvciBkZWNlbnRyYWxpemVkIGdvdmVybmFuY2UsIGFzc2V0IG93bmVyc2hpcCwgYSByZXB1dGF0aW9uCnN5c3RlbSwgYW5kIG1vcmUuIEZvciBhIHNtYWxsIGZlZSB0aGUgcHJvZmlsZSBjYW4gYmUgbWludGVkIHRvIHNlcnZlIGFzIHRoZSBiYXNpcyBmb3IgYWxsIG9uLWNoYWluIHNvY2lhbCBhY3Rpdml0aWVzLiBCeQp1c2luZyBibG9ja2NoYWluIHRlY2hub2xvZ3ksIG9uLWNoYWluIGlkZW50aXRpZXMgYmVjb21lIHBlcm1hbmVudCwgcGxhdGZvcm0tYWdub3N0aWMsIGFuZCBpbnRlcm9wZXJhYmxlLiBUaGV5IGFsbG93IHVzZXJzCnRvIG1haW50YWluIHRoZWlyIHBlcnNvbmFsIHNvY2lhbCByZXB1dGF0aW9uIGFjcm9zcyBhbGwgc3lzdGVtcyBhbmQgbG9naW5zLiBGcm9tIGEgZm91bmRhdGlvbmFsIHBlcnNwZWN0aXZlLCBhIGRlY2VudHJhbGl6ZWQKcHJvZmlsZSBpcyBhIHNtYXJ0LWNvbnRyYWN0IGFkZHJlc3MgdGhhdCByZXByZXNlbnRzIGEgcGVyc29uLCBjb21wYW55LCBvciBvYmplY3QuIEJ5IHBsYWNpbmcgdGhlIGlkZW50aXR5IGluZnJhc3RydWN0dXJlCmluc2lkZSBhIHNtYXJ0LWNvbnRyYWN0LCB3ZSBjYW4gbWFrZSB1c2Ugb2YgdGhlIGNvbXBsZXggbG9naWMgdGhhdCBjYW4gYmUgYWRkZWQgdG8gaXQgYW5kIGxldmVyYWdlIGludHJhY3RhYmlsaXR5IHRoYXQgY29tZXMKd2l0aCBpdC5gKSxtZHgoInAiLG51bGwsYEtleSBGZWF0dXJlc2ApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEFiaWxpdHkgdG8gc3RvcmUgbXVsdGlwbGUgY3J5cHRvIGFzc2V0c2ApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBBYmlsaXR5IGZvciBhIHRoaXJkIHBhcnR5IHRvIHBheSBmb3IgZ2FzIGZlZXNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRWFzeSBhY2NvdW50IHJlY292ZXJ5YCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEFiaWxpdHkgdG8gYWN0IGFzIGEgcHJveHkgYWNjb3VudCBhbmQgZXhlY3V0ZSBzbWFydCBjb250cmFjdHNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgTXVsdGlwbGUgb3duZXJzIHdpdGggdmFyeWluZyBsZXZlbHMgb2YgYWNjZXNzYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEludGVyb3BlcmFibGUgd2l0aCB2aXJ0dWFsbHkgYW55IHBsYXRmb3JtIGFuZCBrZXkgbWFuYWdlcmApKSxtZHgoImgzIix7ImlkIjoiaWRlcC1zd2FwIn0sYElERVAgU3dhcGApLG1keCgicCIsbnVsbCxgSURFUCBTd2FwIGlzIElERVAgTmV0d29ya+KAmXMgb24tY2hhaW4gQXV0byBNYXJrZXQgTWFrZXIgYCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSxgKEFNTSlgKSxgLCB0aGF0IHByb3ZpZGVzIGxpcXVpZGl0eSB0byBibG9ja2NoYWluIG5hdGl2ZSBORlQyLjAsIHRoZSBJREVQCnV0aWxpdHkgdG9rZW4sIGFuZCBvdGhlciBmdW5naWJsZSB0b2tlbnMuIElERVAgc3dhcCBhZG9wdHMgdGhlIENvbnN0YW50IFByb2R1Y3QgTWFya2V0IE1ha2VyIGAsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sYChDUE1NKWApLGAgbW9kZWwuIGAsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sYENQTU1zYCksYCBhcmUgYmFzZWQKb24gdGhlIGZ1bmN0aW9uIHgg4oiXIHkgPSBrLCB3aGljaCBlc3RhYmxpc2hlcyBhIHJhbmdlIG9mIHByaWNlcyBmb3IgdHdvIHRva2VucyBhY2NvcmRpbmcgdG8gdGhlIGF2YWlsYWJsZSBxdWFudGl0aWVzIChsaXF1aWRpdHkpCm9mIGVhY2ggdG9rZW4uIFdpdGhpbiBJREVQIFN3YXAsIHVzZXJzIGNhbiB0cmFkZSB0b2tlbiBwYWlycyBvciBwcm92aWRlIGxpcXVpZGl0eSB0byBhIGNob3NlbiBsaXF1aWRpdHkgcG9vbCBieSBkZXBvc2l0aW5nCnRva2VucyB0byBwcm92aWRlIGVxdWFsIGxpcXVpZGl0eSBvbiBib3RoIHNpZGVzIG9mIHRoZSB0cmFkaW5nIHBhaXIuIElERVAgU3dhcCBhbHNvIGhhcyB0aGUgYWJpbGl0eSB0byBkZXBsb3kgYSBjdXN0b21pemFibGUKTkZUMi4wIG1hcmtldHBsYWNlLiBUaGlzIGZlYXR1cmUgZ2l2ZXMgYXJ0aXN0cyBhbmQgY29udGVudCBjcmVhdG9ycyBhIHNpbXBsZSB3YXkgdG8gaW50ZWdyYXRlIHRoZWlyIG93biBkZWNlbnRyYWxpemVkIG1hcmtldHBsYWNlLgpOYXRpdmUgTkZUIG1hcmtldHBsYWNlIGludGVncmF0aW9uIGlzIGNydWNpYWwgZm9yIGluZHVzdHJ5LXdpZGUgYWRvcHRpb24gc3VjaCBhcyBnYW1pbmcgYW5kIHZpZGVvIHN0cmVhbWluZy5gKSxtZHgoInAiLG51bGwsYEtleSBGZWF0dXJlc2ApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEN1c3RvbWl6YWJsZSBhc3NldCBwb29sc2ApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBTb3ZlcmVpZ24gTkZUMi4wIG1hcmtldHBsYWNlYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYExvdyBzbGlwcGFnZWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBEZXZlbG9wZXIgU0RLYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEludGVyb3BlcmFibGVgKSksbWR4KCJoMiIseyJpZCI6InByb2plY3QtZmVhdHVyZXMifSxgUHJvamVjdCBmZWF0dXJlc2ApLG1keCgiaDMiLHsiaWQiOiJsYXllci0xIn0sYExheWVyIDFgKSxtZHgoInAiLG51bGwsYElERVAgTmV0d29yayB0YWtlcyB0aGUgcGhpbG9zb3BoeSBvZiBpbXBsZW1lbnRpbmcgYSBwdXJwb3NlLWRyaXZlbiBibG9ja2NoYWluLiBNYW55IG9mIHRvZGF5J3MgQmxvY2tjaGFpbnMgYXJlIGdlbmVyYWwgbmV0d29ya3MKdGhhdCBhcmUgYXBwbGljYWJsZSB0byBtYW55IHVzZS1jYXNlcy4gVGhpcyBsYWNrIG9mIGZvY3VzIGFuZCBicm9hZCB1c2UgY2FzZXMgcmFyZWx5IGJyaW5ncyBhIGNvbmNyZXRlIGZyYW1ld29yayB0byBtYWpvcgppbmR1c3RyaWVzLiBUaGlzIG5lZ2F0aXZlbHkgaW1wYWN0cyB0aGUgbmF0aXZlIHByb2plY3RzIGFuZCBjb21tdW5pdGllcy4gSURFUCBiZWxpZXZlcyB0aGF0IGJsb2NrY2hhaW4gYXJjaGl0ZWN0dXJlIHNob3VsZApiZSB0YWlsb3JlZCB0byBjcmVhdGUgYW4gZWNvc3lzdGVtIHRoYXQgaXMgYmVzdCBzdWl0ZWQgdG8gaW5jdWJhdGUgYW5kIG51cnR1cmUgYSBzcGVjaWZpYyBjb21tdW5pdHkuIElERVAgYWxsb3dzIGZvciByZWFsCndvcmxkIHVzZSBjYXNlcyBzb2xlbHkgZGlyZWN0ZWQgdG93YXJkcyB0aGUgZGlnaXRhbCBjb250ZW50IGFyZW5hLiBUaGlzIGh5cGVyZm9jdXMgYWxsb3dzIGNyZWF0b3JzIGFuZCB1c2VycyB0byBlYXNpbHkgaW50ZXJtaW5nbGUKd2l0aCBvbmUgYW5vdGhlciB0byBiZXR0ZXIgc2hhcmUgbmV3IGlkZWFzIGFuZCBmb3N0ZXIgbmV3IHJlbGF0aW9uc2hpcHMuIGApLG1keCgiaDMiLHsiaWQiOiJpbnRlcm9wZXJhYmlsaXR5In0sYEludGVyb3BlcmFiaWxpdHlgKSxtZHgoInAiLG51bGwsYElERVAgTmV0d29yayBpcyBwYXJ0IG9mIENvc21vcywgYSBibG9ja2NoYWluIG5ldHdvcmsgYXJjaGl0ZWN0dXJlLiBDb3Ntb3MgaXMgYSBuZXR3b3JrIG9mIG1hbnkgaW5kZXBlbmRlbnQgYmxvY2tjaGFpbnMsIGNhbGxlZAp6b25lcy4gRWFjaCB6b25lIGluIENvc21vcyBpcyBjb25uZWN0ZWQgdGhyb3VnaCB0aGUgSW50ZXItQmxvY2tjaGFpbiBDb21tdW5pY2F0aW9uIGAsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sYChJQkMpYCksYCBwcm90b2NvbCB3aGljaCBhbGxvd3MgQ29zbW9zIGJsb2NrY2hhaW5zCnRvIGNvbW11bmljYXRlIHRvIG9uZSBhbm90aGVyLiAgVGhlIElCQyBwcm90b2NvbCBjYW4gYmUgZGVmaW5lZCB1c2luZyB0d28gdHlwZXMgb2YgdHJhbnNhY3Rpb25zOyBhbiBJQkNCbG9ja0NvbW1pdFR4IHRyYW5zYWN0aW9uLAp3aGljaCBhbGxvd3MgYSBibG9ja2NoYWluIHRvIHByb3ZlIHRvIGFueSBvYnNlcnZlciBvZiBpdHMgbW9zdCByZWNlbnQgYmxvY2staGFzaCwgYW5kIGFuIElCQ1BhY2tldFR4IHRyYW5zYWN0aW9uLCB3aGljaCBhbGxvd3MKYSBibG9ja2NoYWluIHRvIHByb3ZlIHRvIGFueSBvYnNlcnZlciB0aGF0IHRoZSBnaXZlbiBwYWNrZXQgd2FzIHB1Ymxpc2hlZCBieSB0aGUgc2VuZGVy4oCZcyBhcHBsaWNhdGlvbiB2aWEgYSBNZXJrbGUtcHJvb2YgdG8KdGhlIHJlY2VudCBibG9jay1oYXNoLiBCeSBzcGxpdHRpbmcgdGhlIElCQyBtZWNoYW5pY3MgaW50byB0d28gc2VwYXJhdGUgdHJhbnNhY3Rpb25zLCB3ZSBhbGxvdyB0aGUgcmVjZWl2aW5nIGNoYWluIHRvIGRldGVybWluZQp3aGljaCBwYWNrZXRzIGdldCBjb21taXR0ZWQsIGFuZCBhbGxvdyBmb3IgY29tcGxldGUgZnJlZWRvbSBvbiB0aGUgc2VuZGluZyBjaGFpbiBhcyB0byBob3cgbWFueSBvdXRib3VuZCBwYWNrZXRzIGFyZSBhbGxvd2VkLmApLG1keCgiaDMiLHsiaWQiOiJldm0ifSxgRVZNYCksbWR4KCJwIixudWxsLGBJREVQIGhhcyBmdWxseSBpbnRlZ3JhdGVkIHRoZSBFdGhlcmV1bSBWaXJ0dWFsIE1hY2hpbmUgYCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSxgKEVWTSlgKSxgIGludG8gaXRzIGNvcmUgYXJjaGl0ZWN0dXJlLiBCeSBsZXZlcmFnaW5nIEVWTSBhcyBhIGJhc2lzLCB0aGUKZW50aXJlIGtub3dsZWRnZSBiYXNlIG9mIEV0aGVyZXVtIGlzIGRpcmVjdGx5IGFwcGxpY2FibGUgdG8gSURFUCAtIGRldmVsb3BlcnMgY2FuIHV0aWxpemUgYWxsIHRoZSB0b29scyBhbmQgdHV0b3JpYWxzIHRoYXQKYWxyZWFkeSBoYXZlIGJlZW4gYnVpbHQgZm9yIHRoZSBFdGhlcmV1bSBlY29zeXN0ZW0uIFRoaXMgYWxsb3dzIGZvciBleGlzdGluZyBwcm9qZWN0cyBmcm9tIHRoZSBORlQgYW5kIGRpZ2l0YWwgbWVkaWEgaW5kdXN0cnkKdG8gZWFzaWx5IHRyYW5zaXRpb24gZnJvbSBFdGhlcmV1bSB0byBJREVQIHRvIHRha2UgYWR2YW50YWdlIG9mIGZhc3QgdHJhbnNhY3Rpb24gc3BlZWRzLCBzZWN1cml0eSwgYW5kIGxvdyBnYXMgZmVlcy4gVWx0aW1hdGVseSwKdGhpcyB3aWxsIGFsbG93IHByb2plY3RzIHRvIGNvb3BlcmF0ZSB3aXRoIG90aGVyIGRpZ2l0YWwgY29udGVudCBtaW5kZWQgcHJvamVjdHMgaW4gb25lIGVjb3N5c3RlbS5gKSxtZHgoImgyIix7ImlkIjoiaWRlcC10b2tlbm9taWNzIn0sYElERVAgVG9rZW5vbWljc2ApLG1keCgicCIsbnVsbCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSxgSURFUGApLGAgaXMgdGhlIHV0aWxpdHkgdG9rZW4gb2YgdGhlIElERVAgTmV0d29yayB1c2VkIHRvIHBheSBmb3IgdHJhbnNhY3Rpb24gZmVlcyBhbmQgc2VydmljZXMgYW5kIHdpbGwgYmUgbWludGVkIGFuZCBkaXN0cmlidXRlZAphcyBhIHN0YWtpbmcgcmV3YXJkIHRocm91Z2hvdXQgdGhlIGxpZmUgb2YgdGhlIGVjb3N5c3RlbS5gKSxtZHgoImgzIix7ImlkIjoiYmFzaWMtaW5mb3JtYXRpb24ifSxgQmFzaWMgSW5mb3JtYXRpb25gKSxtZHgoInAiLG51bGwsYFRva2VuIE5hbWU6IGAsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sYElERVBgKSxtZHgoImJyIix7cGFyZW50TmFtZToicCJ9KSxgCmAsYEluaXRpYWwgU3VwcGx5OiAxNTAsMDAwLDAwMGAsbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksYApgLGBFYXJseSBpbmZsYXRpb24gcmF0ZTogNy0yMCVgLG1keCgiYnIiLHtwYXJlbnROYW1lOiJwIn0pLGAKYCxtZHgoImltZyIse2FsdDoidG9rZW5vbWljcyIsc3JjOnJlcXVpcmUoIiF1cmwtbG9hZGVyP2xpbWl0PTEwMDAwJm5hbWU9YXNzZXRzL2ltYWdlcy9bbmFtZV0tW2hhc2hdLltleHRdJmZhbGxiYWNrPWZpbGUtbG9hZGVyIS9ob21lL3JvYmluem9uL2NvZGUvT3hlbmkvcHJvamVjdHMvSURFUC1Eb2NzL3N0YXRpYy9pbWcvc3F1YXJlLnBuZyIpLmRlZmF1bHR9KSksbWR4KCJoMiIseyJpZCI6ImdvdmVybmFuY2UifSxgR292ZXJuYW5jZWApLG1keCgiaDMiLHsiaWQiOiJzdW1tYXJ5In0sYFN1bW1hcnlgKSxtZHgoInAiLG51bGwsYFRoZSBJREVQIEZvdW5kYXRpb24gYWltcyB0byBpbnZvbHZlIHRoZSB3aG9sZSBjb21tdW5pdHkgdG8gcGFydGljaXBhdGUgaW4gdGhlIG5leHQgZ2VuZXJhdGlvbiBORlQgZWNvc3lzdGVtLiBJREVQIGlzIHRoZQpwcm9qZWN0IGdvdmVybmFuY2UgdG9rZW4gYW5kIElERVAgaG9sZGVycyBjYW4gcGFydGljaXBhdGUgaW4gZ292ZXJuYW5jZSB0aHJvdWdoIHN0YWtpbmcgdGhlaXIgdG9rZW5zIHdpdGggdmFsaWRhdG9ycyB0aGF0CmJlc3QgcmVwcmVzZW50IHRoZWlyIHZpc2lvbiBmb3IgdGhlIG5ldHdvcmsuIEFzIHRoZSBlY29zeXN0ZW0gY3JlYXRvcnMsIHRoZSBJREVQIEZvdW5kYXRpb24gaXMgY29udHJpYnV0aW5nIGFsbCB0aGUgbmVjZXNzYXJ5CmluaXRpYWwgcmVzb3VyY2VzIGFuZCBpcyBwcmVzZW50bHkgZ292ZXJuaW5nIHRoZSBlY29zeXN0ZW0gdG8gbnVydHVyZSBhbmQgZ3JvdyB0aGUgcHJvamVjdCBhdCBpdHMgZWFybHkgc3RhZ2VzLCB0byBmYWNpbGl0YXRlCnRoZSBsb25nLXRlcm0gZ3Jvd3RoIGFzIGVmZmljaWVudGx5IGFzIHBvc3NpYmxlLmApLG1keCgiaDMiLHsiaWQiOiJzY29wZS1vZi1nb3Zlcm5hbmNlIn0sYFNjb3BlIG9mIEdvdmVybmFuY2VgKSxtZHgoInAiLG51bGwsYElERVAgZWNvc3lzdGVtIHBhcnRpY2lwYW50cyBhcmUgcmVzcG9uc2libGUgZm9yIGdvdmVybmluZyB0aGUgSURFUCBOZXR3b3JrLCB3aGljaCBpbmNsdWRlcyBidXQgaXMgbm90IGxpbWl0ZWQgdG86IGZ1bmN0aW9uYWxpdHkKaW1wcm92ZW1lbnRzLCB0b2tlbm9taWNzLCBpbmZyYXN0cnVjdHVyZS4gQW55b25lIGNhbiBqb2luIHRoZSBlY29zeXN0ZW0gYW5kIGJlY29tZSBhbiBJREVQIGhvbGRlciB0byBoZWxwIHNoYXBlIHRoZSBmdXR1cmUKb2YgZGVjZW50cmFsaXplZCBkaWdpdGFsIG1lZGlhLiAgYCksbWR4KCJwIixudWxsLGBBbGwgdXNlcnMgY2FuIHN1Ym1pdCBwcm9wb3NhbHMgdG8gdGhlIERBTywgYW5kIGFsbCBgLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LGBJREVQYCksYCBob2xkZXJzIGFyZSBlbnRpdGxlZCB0byB2b3RpbmcgcmlnaHRzIGZvciBwcm9wb3NhbHMgdGhhdCBhcmUKcmVsZXZhbnQgdG8gdGhlbS5gKSxtZHgoImgzIix7ImlkIjoiZ2FsYWN0aWMtaW1wcm92ZW1lbnQtcHJvcG9zYWwtZ2lwIn0sYEdhbGFjdGljIEltcHJvdmVtZW50IFByb3Bvc2FsIChHSVApYCksbWR4KCJwIixudWxsLGBDb21tdW5pdHkgbWVtYmVycyBjYW4gc3VibWl0IHRoZWlyIHByb3Bvc2FscyB0byBpbXByb3ZlIHRoZSBvdmVyYWxsIGVjb3N5c3RlbSBkZXNpZ24gb2YgSURFUCwgc3VjaCBhcyBzdGFuZGFyZHMgaW1wcm92ZW1lbnQgcGxhbnMsIGNvbW11bml0eSBtb2R1bGVzLCBuZXcgYnJpZGdlcywgYW5kIGV0Yy5gKSxtZHgoImgzIix7ImlkIjoiZ2FsYWN0aWMtbWV0cmljcy1wcm9wb3NhbC1nbXAifSxgR2FsYWN0aWMgTWV0cmljcyBQcm9wb3NhbCAoR01QKWApLG1keCgicCIsbnVsbCxgQ29tbXVuaXR5IG1lbWJlcnMgY2FuIGRlY2lkZSB0aGUgbW9zdCBpbXBvcnRhbnQgbWV0cmljcyBvZiBJREVQIE5ldHdvcmsgYXMgd2VsbCBhcyBwcm9wb3NhbHMgY29uY2VybmluZyB0aGUgdG9rZW5vbWljcyBvZiB0aGUgbmV0d29yay4gRXhhbXBsZXMgb2YgdGhlIG1ldHJpY3MgaW5jbHVkZSBidXQgbm90IGxpbWl0ZWQgdG86YCksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRmVlIHN0cnVjdHVyZWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBNaW50aW5nIHRva2Vuc2ApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBDcmVhdGluZyBuZXcgZ3JhbnQgcG9vbHNgKSksbWR4KCJoMiIseyJpZCI6InJvYWRtYXAifSxgUm9hZG1hcGApLG1keCgicCIsbnVsbCxtZHgoImltZyIse2FsdDoicm9hZG1hcCIsc3JjOnJlcXVpcmUoIiF1cmwtbG9hZGVyP2xpbWl0PTEwMDAwJm5hbWU9YXNzZXRzL2ltYWdlcy9bbmFtZV0tW2hhc2hdLltleHRdJmZhbGxiYWNrPWZpbGUtbG9hZGVyIS9ob21lL3JvYmluem9uL2NvZGUvT3hlbmkvcHJvamVjdHMvSURFUC1Eb2NzL3N0YXRpYy9pbWcvcm9hZG1hcF9wYXBlci5wbmciKS5kZWZhdWx0fSkpLG1keCgiaDIiLHsiaWQiOiJsb29raW5nLWFoZWFkIn0sYExvb2tpbmcgQWhlYWRgKSxtZHgoInAiLG51bGwsYFRoZSBJREVQIE5ldHdvcmsgYWltcyB0byBiZWNvbWUgdGhlIGltcGV0dXMgdGhhdCBpbnRyb2R1Y2VzIGFuZCBzdGFuZGFyZGl6ZXMgYmxvY2tjaGFpbiB0ZWNobm9sb2d5IGluIHRoZSBkaWdpdGFsIG1lZGlhIGRvbWFpbi4KVGhlIElERVAgRm91bmRhdGlvbuKAmXMgY29tbWl0bWVudCB3aWxsIG5vdCBzdG9wIGF0IHRoZSBpbml0aWFsIGZvdW5kYXRpb25hbCBtb2R1bGVzIGFuZCBzdGFuZGFyZHMuIEZyb20gM0QgaW5nYW1lIGFzc2V0cyB0bwptZXJnaW5nIHBoeXNpY2FsIGFuZCBkaWdpdGFsIGFzc2V0cyBpbnRvIGEgcGVyZmVjdCB1bmlvbiwgdGhlIHRydWUgcG90ZW50aWFsIG9mIElERVAgaXMgZW5kbGVzcy4gIGApLG1keCgicCIsbnVsbCxgSURFUCBOZXR3b3Jr4oCZcyBhcmNoaXRlY3R1cmUgYW5kIGltcGxlbWVudGF0aW9uIGlzIHN0aWxsIHVuZGVyZ29pbmcgcmFwaWQgZGV2ZWxvcG1lbnQgYW5kIG9wdGltaXphdGlvbiwgd2l0aCBxdWVzdGlvbnMgcmVnYXJkaW5nCndoYXQgbmV3IG1vZHVsZXMgdG8gY3JlYXRlLCB0byB3aGljaCBicmlkZ2Ugd2Ugc2hvdWxkIGJ1aWxkIHRvIGJlc3QgaGVscCB0aGUgbmV0d29yayBncm93LCBhcyB3ZWxsIGFzIHRoZSBmYXN0ZXN0IHdheSB0bwpvbmJvYXJkIG5ldyBwcm9qZWN0cyBvbnRvIG91ciBMYXllciAxLiBGb3IgdGhhdCByZWFzb24sIHdlIGludml0ZSBhbGwgY29tbXVuaXR5IG1lbWJlcnMgdG8gcHJvYWN0aXZlbHkgaW5pdGlhdGUgcHJvcG9zYWxzCmFuZCB2b3RlIHRvIGZ1cnRoZXIgb3B0aW1pemUgSURFUCBhbmQgYnVpbGQgYSBtb3JlIHJvYnVzdCBjb21tdW5pdHkgYW5kIGVjb3N5c3RlbS5gKSxtZHgoImhyIixudWxsKSxtZHgoInAiLG51bGwsYFZlcnNpb24gMS4wICBgKSxtZHgoInAiLG51bGwsYEFwcmlsIDIwMjEgIGApLG1keCgiaHIiLG51bGwpLG1keCgiZGl2Iix7ImNsYXNzTmFtZSI6ImFkbW9uaXRpb24gYWRtb25pdGlvbi1jYXV0aW9uIGFsZXJ0IGFsZXJ0LS13YXJuaW5nIn0sbWR4KCJkaXYiLHtwYXJlbnROYW1lOiJkaXYiLCJjbGFzc05hbWUiOiJhZG1vbml0aW9uLWhlYWRpbmcifSxtZHgoImg1Iix7cGFyZW50TmFtZToiZGl2In0sbWR4KCJzcGFuIix7cGFyZW50TmFtZToiaDUiLCJjbGFzc05hbWUiOiJhZG1vbml0aW9uLWljb24ifSxtZHgoInN2ZyIse3BhcmVudE5hbWU6InNwYW4iLCJ4bWxucyI6Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwid2lkdGgiOiIxNiIsImhlaWdodCI6IjE2Iiwidmlld0JveCI6IjAgMCAxNiAxNiJ9LG1keCgicGF0aCIse3BhcmVudE5hbWU6InN2ZyIsImZpbGxSdWxlIjoiZXZlbm9kZCIsImQiOiJNOC44OTMgMS41Yy0uMTgzLS4zMS0uNTItLjUtLjg4Ny0uNXMtLjcwMy4xOS0uODg2LjVMLjEzOCAxMy40OTlhLjk4Ljk4IDAgMCAwIDAgMS4wMDFjLjE5My4zMS41My41MDEuODg2LjUwMWgxMy45NjRjLjM2NyAwIC43MDQtLjE5Ljg3Ny0uNWExLjAzIDEuMDMgMCAwIDAgLjAxLTEuMDAyTDguODkzIDEuNXptLjEzMyAxMS40OTdINi45ODd2LTIuMDAzaDIuMDM5djIuMDAzem0wLTMuMDA0SDYuOTg3VjUuOTg3aDIuMDM5djQuMDA2eiJ9KSkpLGBjYXV0aW9uYCkpLG1keCgiZGl2Iix7cGFyZW50TmFtZToiZGl2IiwiY2xhc3NOYW1lIjoiYWRtb25pdGlvbi1jb250ZW50In0sbWR4KCJwIix7cGFyZW50TmFtZToiZGl2In0sYElERVAgTmV0d29yayBpcyB1bmRlciBoZWF2eSBkZXZlbG9wbWVudCwgdGhpcyBMaXRlcGFwZXIgbGlrZWx5IHRvIGNoYW5nZSBpbiB0aGUgbmVhciBmdXR1cmUhYCkpKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}
{"remainingRequest":"/Users/aidas/Desktop/Docs/idep/node_modules/babel-loader/lib/index.js??ref--12-1!/Users/aidas/Desktop/Docs/idep/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/Users/aidas/Desktop/Docs/idep/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--12-3!/Users/aidas/Desktop/Docs/idep/docs/Litepaper.md","dependencies":[{"path":"/Users/aidas/Desktop/Docs/idep/docs/Litepaper.md","mtime":1617924904044},{"path":"/Users/aidas/Desktop/Docs/idep/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-litepaper-md-d03.json","mtime":1617973784702},{"path":"/Users/aidas/Desktop/Docs/idep/node_modules/cache-loader/dist/cjs.js","mtime":1617909358812},{"path":"/Users/aidas/Desktop/Docs/idep/node_modules/babel-loader/lib/index.js","mtime":1617909358745},{"path":"/Users/aidas/Desktop/Docs/idep/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1617909370487},{"path":"/Users/aidas/Desktop/Docs/idep/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1617909370208}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2FpZGFzL0Rlc2t0b3AvRG9jcy9pZGVwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17dGl0bGU6J0lERVAgTGl0ZXBhcGVyJ307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6IkxpdGVwYXBlciIsImlkIjoiTGl0ZXBhcGVyIiwiaXNEb2NzSG9tZVBhZ2UiOmZhbHNlLCJ0aXRsZSI6IklERVAgTGl0ZXBhcGVyIiwiZGVzY3JpcHRpb24iOiJjb3ZlcmltYWdlIiwic291cmNlIjoiQHNpdGUvZG9jcy9MaXRlcGFwZXIubWQiLCJzbHVnIjoiL0xpdGVwYXBlciIsInBlcm1hbGluayI6Ii9MaXRlcGFwZXIiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL0lERVAtbmV0d29yay9JREVQLURvY3MvZG9jcy9MaXRlcGFwZXIubWQiLCJ2ZXJzaW9uIjoiY3VycmVudCIsInNpZGViYXIiOiJkb2NzIiwicHJldmlvdXMiOnsidGl0bGUiOiJXZWxjb21lIiwicGVybWFsaW5rIjoiLyJ9LCJuZXh0Ijp7InRpdGxlIjoiSVBGUy1Qcml2YXRlLU5ldHdvcmsiLCJwZXJtYWxpbmsiOiIvSVBGUyJ9fTsvKiBAanN4UnVudGltZSBjbGFzc2ljICovIC8qIEBqc3ggbWR4ICovZXhwb3J0IGNvbnN0IHRvYz1be3ZhbHVlOidJbnRyb2R1Y3Rpb24nLGlkOidpbnRyb2R1Y3Rpb24nLGNoaWxkcmVuOltdfSx7dmFsdWU6J0ZvdW5kYXRpb25hbCBNb2R1bGVzJyxpZDonZm91bmRhdGlvbmFsLW1vZHVsZXMnLGNoaWxkcmVuOlt7dmFsdWU6J1VwdGFrZScsaWQ6J3VwdGFrZScsY2hpbGRyZW46W119LHt2YWx1ZTonSURFTlRUJyxpZDonaWRlbnR0JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidJREVQIFN3YXAnLGlkOidpZGVwLXN3YXAnLGNoaWxkcmVuOltdfV19LHt2YWx1ZTonUHJvamVjdCBmZWF0dXJlcycsaWQ6J3Byb2plY3QtZmVhdHVyZXMnLGNoaWxkcmVuOlt7dmFsdWU6J0xheWVyIDEnLGlkOidsYXllci0xJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidJbnRlcm9wZXJhYmlsaXR5JyxpZDonaW50ZXJvcGVyYWJpbGl0eScsY2hpbGRyZW46W119LHt2YWx1ZTonRVZNJyxpZDonZXZtJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J0lERVAgVG9rZW5vbWljcycsaWQ6J2lkZXAtdG9rZW5vbWljcycsY2hpbGRyZW46W3t2YWx1ZTonQmFzaWMgSW5mb3JtYXRpb24nLGlkOidiYXNpYy1pbmZvcm1hdGlvbicsY2hpbGRyZW46W119XX0se3ZhbHVlOidHb3Zlcm5hbmNlJyxpZDonZ292ZXJuYW5jZScsY2hpbGRyZW46W3t2YWx1ZTonU3VtbWFyeScsaWQ6J3N1bW1hcnknLGNoaWxkcmVuOltdfSx7dmFsdWU6J1Njb3BlIG9mIEdvdmVybmFuY2UnLGlkOidzY29wZS1vZi1nb3Zlcm5hbmNlJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidHYWxhY3RpYyBJbXByb3ZlbWVudCBQcm9wb3NhbCAoR0lQKScsaWQ6J2dhbGFjdGljLWltcHJvdmVtZW50LXByb3Bvc2FsLWdpcCcsY2hpbGRyZW46W119LHt2YWx1ZTonR2FsYWN0aWMgTWV0cmljcyBQcm9wb3NhbCAoR01QKScsaWQ6J2dhbGFjdGljLW1ldHJpY3MtcHJvcG9zYWwtZ21wJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J1JvYWRtYXAnLGlkOidyb2FkbWFwJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidMb29raW5nIEFoZWFkJyxpZDonbG9va2luZy1haGVhZCcsY2hpbGRyZW46W119XTtjb25zdCBsYXlvdXRQcm9wcz17dG9jfTtjb25zdCBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe2NvbXBvbmVudHMsLi4ucHJvcHN9KXtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6ImNvdmVyaW1hZ2UiLHNyYzpyZXF1aXJlKCIhdXJsLWxvYWRlcj9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtoYXNoXS5bZXh0XSZmYWxsYmFjaz1maWxlLWxvYWRlciEvVXNlcnMvYWlkYXMvRGVza3RvcC9Eb2NzL2lkZXAvc3RhdGljL2ltZy9jb3ZlcmltYWdlLnBuZyIpLmRlZmF1bHR9KSksbWR4KCJoMiIseyJpZCI6ImludHJvZHVjdGlvbiJ9LGBJbnRyb2R1Y3Rpb25gKSxtZHgoInAiLG51bGwsYElERVAgaXMgYW4gTkZUMi4wIEJsb2NrY2hhaW4gdGhhdCBmb2N1c2VzIG9uIGRlY2VudHJhbGl6ZWQgZGlnaXRhbCBtZWRpYS4gSXQgaXMgYnVpbHQgdXNpbmcgdGhlIFRlbmRlcm1pbnQgY29uc2Vuc3VzIGVuZ2luZQphbmQgQ29zbW9zIFNESy4gSURFUCB3aWxsIGxhdW5jaCB3aXRoIDMgbWFpbiBmb3VuZGF0aW9uYWwgbW9kZWxzIHRvIGtpY2sgc3RhcnQgdGhlIGVjb3N5c3RlbS4gVXB0YWtlIC0gdGhlIG5leHQgZ2VuZXJhdGlvbgpORlQyLjAgcGxhdGZvcm0sIElERU5UVCAtIGEgaHlwZXIgZXh0ZW5zaWJsZSBvbi1jaGFpbiBwcm9maWxlLCBhbmQgSURFUC1Td2FwIC0gYSBBTU0gc3dhcCBhbmQgbWFya2V0cGxhY2UgZm9yIGRpZ2l0YWwgYXNzZXRzLgpJREVQIGlzIHRoZSBuYXRpdmUgdXRpbGl0eSB0b2tlbiBvZiB0aGUgSURFUCBOZXR3b3JrLmApLG1keCgicCIsbnVsbCxgVGhlIElERVAgTmV0d29yayBpcyBiZWluZyBkZXZlbG9wZWQgYnkgdGhlIElERVAgRm91bmRhdGlvbi4gVGhlIElERVAgRm91bmRhdGlvbiB3aWxsIGZhY2lsaXRhdGUgdGhlIGVhcmx5LXN0YWdlIGRldmVsb3BtZW50Cm9mIHRoZSBibG9ja2NoYWluLCBieSBjcmVhdGluZyB0aGUgcHJlbWllciBkaWdpdGFsIG1lZGlhIGZvY3VzZWQgZWNvc3lzdGVtLiBVbHRpbWF0ZWx5IHRoZSB2aXNpb24gaXMgZm9yIHRoZSBJREVQIE5ldHdvcmsKdG8gYmVjb21lIHRoZSBiaWdnZXN0IGNvbW11bml0eSBnb3Zlcm5lZCBORlQgYmxvY2tjaGFpbi5gKSxtZHgoImgyIix7ImlkIjoiZm91bmRhdGlvbmFsLW1vZHVsZXMifSxgRm91bmRhdGlvbmFsIE1vZHVsZXNgKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6ImFyY2hpdGVjdHVyZSIsc3JjOnJlcXVpcmUoIiF1cmwtbG9hZGVyP2xpbWl0PTEwMDAwJm5hbWU9YXNzZXRzL2ltYWdlcy9bbmFtZV0tW2hhc2hdLltleHRdJmZhbGxiYWNrPWZpbGUtbG9hZGVyIS9Vc2Vycy9haWRhcy9EZXNrdG9wL0RvY3MvaWRlcC9zdGF0aWMvaW1nL2FyY2hpdGVjdHVyZS5wbmciKS5kZWZhdWx0fSkpLG1keCgiaDMiLHsiaWQiOiJ1cHRha2UifSxgVXB0YWtlYCksbWR4KCJwIixudWxsLGBVcHRha2UgaXMgSURFUOKAmXMgb25lLXN0b3AgTkZUIG5hdGl2ZSBtb2R1bGUuIFVwdGFrZSB3aWxsIGFsbG93IGNyZWF0b3JzIHRvIHF1aWNrbHkgbWludCBhbnkgZm9ybSBvZiBORlQuIFRoZSBVcHRha2UgaW50ZXJmYWNlCndpbGwgY29tZSBpbiAyIGZsYXZvcnMuIEZpcnN0LCB0aGVyZSBpcyBhbiBlbGVnYW50IFVJL1VYIGZvciBldmVyeWRheSB1c2UuIFNlY29uZCwgYSBtb3JlIGV4dGVuc2libGUgU0RLIHZlcnNpb24gd2lsbCBiZQpkZXBsb3llZCBhbGxvd2luZyBkZXZlbG9wZXJzIHRvIGNyZWF0ZSBpbnRyaWNhdGUgdmVyc2lvbnMgb2YgTkZUcyByZWFkeSB0byBuYXRpdmVseSBpbnRlZ3JhdGUgaW50byB0aGVpciBnYW1lcyBhbmQgZGFwcHMuClVwdGFrZSBhbGxvd3MgdXNlcnMgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgYW4gZXh0cmVtZWx5IGV4dHJlbWVseSBkZXNjcmlwdGl2ZSBORlQyLjAgc3RhbmRhcmQuIFdpdGggdGhlIGltcGxlbWVudGF0aW9uIG9mIGFuCmV4dGVuc2l2ZSBrZXlzdG9yZSB2YWx1ZSAod2l0aCB0aGUgYWJpbGl0eSB0byByZWZlcmVuY2Ugb2ZmLWNoYWluIGFuZCBvbi1jaGFpbiBmaWxlcyBpbiB0aGUgTkZUMi4wIHN0YW5kYXJkKSBVcHRha2UgYWxsb3dzCnVzZXJzIHRvIGNvbnN0cnVjdCBhbmQgaHlicmlkaXplIHZhcmlvdXMgdmVyc2lvbnMgb2YgcGh5c2ljYWwgYW5kIGRpZ2l0YWwgTkZU4oCZcy4gT25jZSB0aGUgbWludGluZyBpcyBjb21wbGV0ZSwgdGhlIG93bmVyCmlzIHRoZW4gYWJsZSB0byBjb21wbGV0ZWx5IGN1c3RvbWl6ZSBoaXMgb3IgaGVyIHRva2Vucy4gVGhlIGN1c3RvbWl6YWJpbGl0eSBvZiB0b2tlbnMgbWVhbnMgdGhhdCBjcmVhdG9ycyBhcmUgZnJlZSB0byBkZWNpZGUKdXBvbiB0aGVpciBmdW5jdGlvbmFsaXR5LCB0b3RhbCBzdXBwbHksIHRhcmdldCByZWNpcGllbnRzLCBuYW1lLCBhbmQgYnJhbmRpbmcuYCksbWR4KCJwIixudWxsLGBLZXkgRmVhdHVyZXNgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBTdXBwb3J0IGZvciBsZWdhY3kgTkZUIGNyZWF0aW9uYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEFiaWxpdHkgdG8gbWludCBORlQyLjBgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgSW50ZWxsZWN0dWFsIHNtYXJ0IGNvbnRyYWN0IGxheWVyIGludGVncmF0aW9uYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYERldmVsb3BlciBTREtgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgTkZUMi4wIEdhbWlmaWNhdGlvbmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBQaHlzaWNhbCBORlQyLjBgKSksbWR4KCJoMyIseyJpZCI6ImlkZW50dCJ9LGBJREVOVFRgKSxtZHgoInAiLG51bGwsYElERU5UVCBpcyBhbiBvcGVuLXNvdXJjZSBsaWdodHdlaWdodCBzdGFuZGFyZCB0aGF0IHdpbGwgYWxsb3cgZm9yIGRlY2VudHJhbGl6ZWQgZ292ZXJuYW5jZSwgYXNzZXQgb3duZXJzaGlwLCBhIHJlcHV0YXRpb24Kc3lzdGVtLCBhbmQgbW9yZS4gRm9yIGEgc21hbGwgZmVlIHRoZSBwcm9maWxlIGNhbiBiZSBtaW50ZWQgdG8gc2VydmUgYXMgdGhlIGJhc2lzIGZvciBhbGwgb24tY2hhaW4gc29jaWFsIGFjdGl2aXRpZXMuIEJ5CnVzaW5nIGJsb2NrY2hhaW4gdGVjaG5vbG9neSwgb24tY2hhaW4gaWRlbnRpdGllcyBiZWNvbWUgcGVybWFuZW50LCBwbGF0Zm9ybS1hZ25vc3RpYywgYW5kIGludGVyb3BlcmFibGUuIFRoZXkgYWxsb3cgdXNlcnMKdG8gbWFpbnRhaW4gdGhlaXIgcGVyc29uYWwgc29jaWFsIHJlcHV0YXRpb24gYWNyb3NzIGFsbCBzeXN0ZW1zIGFuZCBsb2dpbnMuIEZyb20gYSBmb3VuZGF0aW9uYWwgcGVyc3BlY3RpdmUsIGEgZGVjZW50cmFsaXplZApwcm9maWxlIGlzIGEgc21hcnQtY29udHJhY3QgYWRkcmVzcyB0aGF0IHJlcHJlc2VudHMgYSBwZXJzb24sIGNvbXBhbnksIG9yIG9iamVjdC4gQnkgcGxhY2luZyB0aGUgaWRlbnRpdHkgaW5mcmFzdHJ1Y3R1cmUKaW5zaWRlIGEgc21hcnQtY29udHJhY3Qgd2UgY2FuIG1ha2UgdXNlIG9mIHRoZSBjb21wbGV4IGxvZ2ljIHRoYXQgY2FuIGJlIGFkZGVkIHRvIGl0IGFuZCBsZXZlcmFnZSBpbnRyYWN0YWJpbGl0eSB0aGF0IGNvbWVzCndpdGggaXQuYCksbWR4KCJwIixudWxsLGBLZXkgRmVhdHVyZXNgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBBYmlsaXR5IHRvIHN0b3JlIG11bHRpcGxlIGNyeXB0byBhc3NldHNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgQWJpbGl0eSBmb3IgYSB0aGlyZCBwYXJ0eSB0byBwYXkgZm9yIGdhcyBmZWVzYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEVhc3kgYWNjb3VudCByZWNvdmVyeWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBBYmlsaXR5IHRvIGFjdCBhcyBhIHByb3h5IGFjY291bnQgYW5kIGV4ZWN1dGUgc21hcnQgY29udHJhY3RzYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYE11bHRpcGxlIG93bmVycyB3aXRoIHZhcnlpbmcgbGV2ZWxzIG9mIGFjY2Vzc2ApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBJbnRlcm9wZXJhYmxlIHdpdGggdmlydHVhbGx5IGFueSBwbGF0Zm9ybSBhbmQga2V5IG1hbmFnZXJgKSksbWR4KCJoMyIseyJpZCI6ImlkZXAtc3dhcCJ9LGBJREVQIFN3YXBgKSxtZHgoInAiLG51bGwsYElERVAgU3dhcCBpcyBJREVQIE5ldHdvcmvigJlzIG9uLWNoYWluIEF1dG8gTWFya2V0IE1ha2VyIGAsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sYChBTU0pYCksYCwgdGhhdCBwcm92aWRlcyBsaXF1aWRpdHkgdG8gYmxvY2tjaGFpbiBuYXRpdmUgTkZUMi4wLCB0aGUgSURFUAp1dGlsaXR5IHRva2VuLCBhbmQgb3RoZXIgZnVuZ2libGUgdG9rZW5zLiBJREVQIHN3YXAgYWRvcHRzIHRoZSBDb25zdGFudCBQcm9kdWN0IE1hcmtldCBNYWtlciBgLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LGAoQ1BNTSlgKSxgIG1vZGVsLiBgLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LGBDUE1Nc2ApLGAgYXJlIGJhc2VkCm9uIHRoZSBmdW5jdGlvbiB4IOKIlyB5ID0gaywgd2hpY2ggZXN0YWJsaXNoZXMgYSByYW5nZSBvZiBwcmljZXMgZm9yIHR3byB0b2tlbnMgYWNjb3JkaW5nIHRvIHRoZSBhdmFpbGFibGUgcXVhbnRpdGllcyAobGlxdWlkaXR5KQpvZiBlYWNoIHRva2VuLiBXaXRoaW4gSURFUCBTd2FwLCB1c2VycyBjYW4gdHJhZGUgdG9rZW4gcGFpcnMgb3IgcHJvdmlkZSBsaXF1aWRpdHkgdG8gYSBjaG9zZW4gbGlxdWlkaXR5IHBvb2wgYnkgZGVwb3NpdGluZwp0b2tlbnMgdG8gcHJvdmlkZSBlcXVhbCBsaXF1aWRpdHkgb24gYm90aCBzaWRlcyBvZiB0aGUgdHJhZGluZyBwYWlyLiBJREVQIFN3YXAgYWxzbyBoYXMgdGhlIGFiaWxpdHkgdG8gZGVwbG95IGEgY3VzdG9taXphYmxlCk5GVDIuMCBtYXJrZXRwbGFjZS4gVGhpcyBmZWF0dXJlIGdpdmVzIGFydGlzdHMgYW5kIGNvbnRlbnQgY3JlYXRvcnMgYSBzaW1wbGUgd2F5IHRvIGludGVncmF0ZSB0aGVpciBvd24gZGVjZW50cmFsaXplZCBtYXJrZXRwbGFjZS4KTmF0aXZlIE5GVCBtYXJrZXRwbGFjZSBpbnRlZ3JhdGlvbiBpcyBjcnVjaWFsIGZvciBpbmR1c3RyeS13aWRlIGFkb3B0aW9uIHN1Y2ggYXMgZ2FtaW5nIGFuZCB2aWRlbyBzdHJlYW1pbmcuYCksbWR4KCJwIixudWxsLGBLZXkgRmVhdHVyZXNgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBDdXN0b21pemFibGUgYXNzZXQgcG9vbHNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgU292ZXJlaWduIE5GVDIuMCBtYXJrZXRwbGFjZWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBMb3cgc2xpcHBhZ2VgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgRGV2ZWxvcGVyIFNES2ApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBJbnRlcm9wZXJhYmxlYCkpLG1keCgiaDIiLHsiaWQiOiJwcm9qZWN0LWZlYXR1cmVzIn0sYFByb2plY3QgZmVhdHVyZXNgKSxtZHgoImgzIix7ImlkIjoibGF5ZXItMSJ9LGBMYXllciAxYCksbWR4KCJwIixudWxsLGBJREVQIE5ldHdvcmsgdGFrZXMgdGhlIHBoaWxvc29waHkgb2YgaW1wbGVtZW50aW5nIGEgcHVycG9zZS1kcml2ZW4gYmxvY2tjaGFpbi4gTWFueSBvZiB0b2RheSdzIEJsb2NrY2hhaW5zIGFyZSBnZW5lcmFsIG5ldHdvcmtzCnRoYXQgYXJlIGFwcGxpY2FibGUgdG8gbWFueSB1c2UtY2FzZXMuIFRoaXMgbGFjayBvZiBmb2N1cyBhbmQgYnJvYWQgdXNlIGNhc2VzIHJhcmVseSBicmluZ3MgYSBjb25jcmV0ZSBmcmFtZXdvcmsgdG8gbWFqb3IKaW5kdXN0cmllcy4gVGhpcyBuZWdhdGl2ZWx5IGltcGFjdHMgdGhlIG5hdGl2ZSBwcm9qZWN0cyBhbmQgY29tbXVuaXRpZXMuIElERVAgYmVsaWV2ZXMgdGhhdCBibG9ja2NoYWluIGFyY2hpdGVjdHVyZSBzaG91bGQKYmUgdGFpbG9yZWQgdG8gY3JlYXRlIGFuIGVjb3N5c3RlbSB0aGF0IGlzIGJlc3Qgc3VpdGVkIHRvIGluY3ViYXRlIGFuZCBudXJ0dXJlIGEgc3BlY2lmaWMgY29tbXVuaXR5LiBJREVQIGFsbG93cyBmb3IgcmVhbAp3b3JsZCB1c2UgY2FzZXMgc29sZWx5IGRpcmVjdGVkIHRvd2FyZHMgdGhlIGRpZ2l0YWwgY29udGVudCBhcmVuYS4gVGhpcyBoeXBlcmZvY3VzIGFsbG93cyBjcmVhdG9ycyBhbmQgdXNlcnMgdG8gZWFzaWx5IGludGVybWluZ2xlCndpdGggb25lIGFub3RoZXIgdG8gYmV0dGVyIHNoYXJlIG5ldyBpZGVhcyBhbmQgZm9zdGVyIG5ldyByZWxhdGlvbnNoaXBzLiBgKSxtZHgoImgzIix7ImlkIjoiaW50ZXJvcGVyYWJpbGl0eSJ9LGBJbnRlcm9wZXJhYmlsaXR5YCksbWR4KCJwIixudWxsLGBJREVQIE5ldHdvcmsgaXMgcGFydCBvZiBDb3Ntb3MsIGEgYmxvY2tjaGFpbiBuZXR3b3JrIGFyY2hpdGVjdHVyZS4gQ29zbW9zIGlzIGEgbmV0d29yayBvZiBtYW55IGluZGVwZW5kZW50IGJsb2NrY2hhaW5zLCBjYWxsZWQKem9uZXMuIEVhY2ggem9uZSBpbiBDb3Ntb3MgaXMgY29ubmVjdGVkIHRocm91Z2ggdGhlIEludGVyLUJsb2NrY2hhaW4gQ29tbXVuaWNhdGlvbiBgLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LGAoSUJDKWApLGAgcHJvdG9jb2wgd2hpY2ggYWxsb3dzIENvc21vcyBibG9ja2NoYWlucwp0byBjb21tdW5pY2F0ZSB0byBvbmUgYW5vdGhlci4gIFRoZSBJQkMgcHJvdG9jb2wgY2FuIGJlIGRlZmluZWQgdXNpbmcgdHdvIHR5cGVzIG9mIHRyYW5zYWN0aW9uczsgYW4gSUJDQmxvY2tDb21taXRUeCB0cmFuc2FjdGlvbiwKd2hpY2ggYWxsb3dzIGEgYmxvY2tjaGFpbiB0byBwcm92ZSB0byBhbnkgb2JzZXJ2ZXIgb2YgaXRzIG1vc3QgcmVjZW50IGJsb2NrLWhhc2gsIGFuZCBhbiBJQkNQYWNrZXRUeCB0cmFuc2FjdGlvbiwgd2hpY2ggYWxsb3dzCmEgYmxvY2tjaGFpbiB0byBwcm92ZSB0byBhbnkgb2JzZXJ2ZXIgdGhhdCB0aGUgZ2l2ZW4gcGFja2V0IHdhcyBwdWJsaXNoZWQgYnkgdGhlIHNlbmRlcuKAmXMgYXBwbGljYXRpb24gdmlhIGEgTWVya2xlLXByb29mIHRvCnRoZSByZWNlbnQgYmxvY2staGFzaC4gQnkgc3BsaXR0aW5nIHRoZSBJQkMgbWVjaGFuaWNzIGludG8gdHdvIHNlcGFyYXRlIHRyYW5zYWN0aW9ucywgd2UgYWxsb3cgdGhlIHJlY2VpdmluZyBjaGFpbiB0byBkZXRlcm1pbmUKd2hpY2ggcGFja2V0cyBnZXQgY29tbWl0dGVkLCBhbmQgYWxsb3cgZm9yIGNvbXBsZXRlIGZyZWVkb20gb24gdGhlIHNlbmRpbmcgY2hhaW4gYXMgdG8gaG93IG1hbnkgb3V0Ym91bmQgcGFja2V0cyBhcmUgYWxsb3dlZC5gKSxtZHgoImgzIix7ImlkIjoiZXZtIn0sYEVWTWApLG1keCgicCIsbnVsbCxgSURFUCBoYXMgZnVsbHkgaW50ZWdyYXRlZCB0aGUgRXRoZXJldW0gVmlydHVhbCBNYWNoaW5lIGAsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sYChFVk0pYCksYCBpbnRvIGl0cyBjb3JlIGFyY2hpdGVjdHVyZS4gQnkgbGV2ZXJhZ2luZyBFVk0gYXMgYSBiYXNpcywgdGhlCmVudGlyZSBrbm93bGVkZ2UgYmFzZSBvZiBFdGhlcmV1bSBpcyBkaXJlY3RseSBhcHBsaWNhYmxlIHRvIElERVAgLSBkZXZlbG9wZXJzIGNhbiB1dGlsaXplIGFsbCB0aGUgdG9vbHMgYW5kIHR1dG9yaWFscyB0aGF0CmFscmVhZHkgaGF2ZSBiZWVuIGJ1aWx0IGZvciB0aGUgRXRoZXJldW0gZWNvc3lzdGVtLiBUaGlzIGFsbG93cyBmb3IgZXhpc3RpbmcgcHJvamVjdHMgZnJvbSB0aGUgTkZUIGFuZCBkaWdpdGFsIG1lZGlhIGluZHVzdHJ5CnRvIGVhc2lseSB0cmFuc2l0aW9uIGZyb20gRXRoZXJldW0gdG8gSURFUCB0byB0YWtlIGFkdmFudGFnZSBvZiBmYXN0IHRyYW5zYWN0aW9uIHNwZWVkcywgc2VjdXJpdHksIGFuZCBsb3cgZ2FzIGZlZXMuIFVsdGltYXRlbHkKdGhpcyB3aWxsIGFsbG93IHByb2plY3RzIHRvIGNvb3BlcmF0ZSB3aXRoIG90aGVyIGRpZ2l0YWwgY29udGVudCBtaW5kZWQgcHJvamVjdHMgaW4gb25lIGVjb3N5c3RlbS5gKSxtZHgoImgyIix7ImlkIjoiaWRlcC10b2tlbm9taWNzIn0sYElERVAgVG9rZW5vbWljc2ApLG1keCgicCIsbnVsbCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSxgSURFUGApLGAgaXMgdGhlIHV0aWxpdHkgdG9rZW4gb2YgdGhlIElERVAgTmV0d29yayB1c2VkIHRvIHBheSBmb3IgdHJhbnNhY3Rpb24gZmVlcyBhbmQgc2VydmljZXMgYW5kIHdpbGwgYmUgbWludGVkIGFuZCBkaXN0cmlidXRlZAphcyBhIHN0YWtpbmcgcmV3YXJkIHRocm91Z2hvdXQgdGhlIGxpZmUgb2YgdGhlIGVjb3N5c3RlbS5gKSxtZHgoImgzIix7ImlkIjoiYmFzaWMtaW5mb3JtYXRpb24ifSxgQmFzaWMgSW5mb3JtYXRpb25gKSxtZHgoInAiLG51bGwsYFRva2VuIE5hbWU6IGAsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sYElERVBgKSxtZHgoImJyIix7cGFyZW50TmFtZToicCJ9KSxgCmAsYEluaXRpYWwgU3VwcGx5OiAxNTAsMDAwLDAwMGAsbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksYApgLGBFYXJseSBpbmZsYXRpb24gcmF0ZTogNy0yMCVgLG1keCgiYnIiLHtwYXJlbnROYW1lOiJwIn0pLGAKYCxtZHgoImltZyIse2FsdDoidG9rZW5vbWljcyIsc3JjOnJlcXVpcmUoIiF1cmwtbG9hZGVyP2xpbWl0PTEwMDAwJm5hbWU9YXNzZXRzL2ltYWdlcy9bbmFtZV0tW2hhc2hdLltleHRdJmZhbGxiYWNrPWZpbGUtbG9hZGVyIS9Vc2Vycy9haWRhcy9EZXNrdG9wL0RvY3MvaWRlcC9zdGF0aWMvaW1nL3NxdWFyZS5wbmciKS5kZWZhdWx0fSkpLG1keCgiaDIiLHsiaWQiOiJnb3Zlcm5hbmNlIn0sYEdvdmVybmFuY2VgKSxtZHgoImgzIix7ImlkIjoic3VtbWFyeSJ9LGBTdW1tYXJ5YCksbWR4KCJwIixudWxsLGBUaGUgSURFUCBGb3VuZGF0aW9uIGFpbXMgdG8gaW52b2x2ZSB0aGUgd2hvbGUgY29tbXVuaXR5IHRvIHBhcnRpY2lwYXRlIGluIHRoZSBuZXh0IGdlbmVyYXRpb24gTkZUIGVjb3N5c3RlbS4gSURFUCBpcyB0aGUKcHJvamVjdCBnb3Zlcm5hbmNlIHRva2VuIGFuZCBJREVQIGhvbGRlcnMgY2FuIHBhcnRpY2lwYXRlIGluIGdvdmVybmFuY2UgdGhyb3VnaCBzdGFraW5nIHRoZWlyIHRva2VucyB3aXRoIHZhbGlkYXRvcnMgdGhhdApiZXN0IHJlcHJlc2VudCB0aGVpciB2aXNpb24gZm9yIHRoZSBuZXR3b3JrLiBBcyB0aGUgZWNvc3lzdGVtIGNyZWF0b3JzLCB0aGUgSURFUCBGb3VuZGF0aW9uIGlzIGNvbnRyaWJ1dGluZyBhbGwgdGhlIG5lY2Vzc2FyeQppbml0aWFsIHJlc291cmNlcyBhbmQgaXMgcHJlc2VudGx5IGdvdmVybmluZyB0aGUgZWNvc3lzdGVtIHRvIG51cnR1cmUgYW5kIGdyb3cgdGhlIHByb2plY3QgYXQgaXRzIGVhcmx5IHN0YWdlcywgdG8gZmFjaWxpdGF0ZQp0aGUgbG9uZy10ZXJtIGdyb3d0aCBhcyBlZmZpY2llbnRseSBhcyBwb3NzaWJsZS5gKSxtZHgoImgzIix7ImlkIjoic2NvcGUtb2YtZ292ZXJuYW5jZSJ9LGBTY29wZSBvZiBHb3Zlcm5hbmNlYCksbWR4KCJwIixudWxsLGBJREVQIGVjb3N5c3RlbSBwYXJ0aWNpcGFudHMgYXJlIHJlc3BvbnNpYmxlIGZvciBnb3Zlcm5pbmcgdGhlIElERVAgTmV0d29yaywgd2hpY2ggaW5jbHVkZXMgYnV0IGlzIG5vdCBsaW1pdGVkIHRvOiBmdW5jdGlvbmFsaXR5CmltcHJvdmVtZW50cywgdG9rZW5vbWljcywgaW5mcmFzdHJ1Y3R1cmUuIEFueW9uZSBjYW4gam9pbiB0aGUgZWNvc3lzdGVtIGFuZCBiZWNvbWUgYW4gSURFUCBob2xkZXIgdG8gaGVscCBzaGFwZSB0aGUgZnV0dXJlCm9mIGRlY2VudHJhbGl6ZWQgZGlnaXRhbCBtZWRpYS4gIGApLG1keCgicCIsbnVsbCxgQWxsIHVzZXJzIGNhbiBzdWJtaXQgcHJvcG9zYWxzIHRvIHRoZSBEQU8sIGFuZCBhbGwgYCxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSxgSURFUGApLGAgaG9sZGVycyBhcmUgZW50aXRsZWQgdG8gdm90aW5nIHJpZ2h0cyBmb3IgcHJvcG9zYWxzIHRoYXQgYXJlCnJlbGV2YW50IHRvIHRoZW0uYCksbWR4KCJoMyIseyJpZCI6ImdhbGFjdGljLWltcHJvdmVtZW50LXByb3Bvc2FsLWdpcCJ9LGBHYWxhY3RpYyBJbXByb3ZlbWVudCBQcm9wb3NhbCAoR0lQKWApLG1keCgicCIsbnVsbCxgQ29tbXVuaXR5IG1lbWJlcnMgY2FuIHN1Ym1pdCB0aGVpciBwcm9wb3NhbHMgdG8gaW1wcm92ZSB0aGUgb3ZlcmFsbCBlY29zeXN0ZW0gZGVzaWduIG9mIElERVAsIHN1Y2ggYXMgc3RhbmRhcmRzIGltcHJvdmVtZW50IHBsYW5zLCBjb21tdW5pdHkgbW9kdWxlcywgbmV3IGJyaWRnZXMsIGFuZCBldGMuYCksbWR4KCJoMyIseyJpZCI6ImdhbGFjdGljLW1ldHJpY3MtcHJvcG9zYWwtZ21wIn0sYEdhbGFjdGljIE1ldHJpY3MgUHJvcG9zYWwgKEdNUClgKSxtZHgoInAiLG51bGwsYENvbW11bml0eSBtZW1iZXJzIGNhbiBkZWNpZGUgdGhlIG1vc3QgaW1wb3J0YW50IG1ldHJpY3Mgb2YgSURFUCBOZXR3b3JrIGFzIHdlbGwgYXMgcHJvcG9zYWxzIGNvbmNlcm5pbmcgdGhlIHRva2Vub21pY3Mgb2YgdGhlIG5ldHdvcmsuIEV4YW1wbGVzIG9mIHRoZSBtZXRyaWNzIGluY2x1ZGUgYnV0IG5vdCBsaW1pdGVkIHRvOmApLG1keCgidWwiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEZlZSBzdHJ1Y3R1cmVgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgTWludGluZyB0b2tlbnNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgQ3JlYXRpbmcgbmV3IGdyYW50IHBvb2xzYCkpLG1keCgiaDIiLHsiaWQiOiJyb2FkbWFwIn0sYFJvYWRtYXBgKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6InJvYWRtYXAiLHNyYzpyZXF1aXJlKCIhdXJsLWxvYWRlcj9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtoYXNoXS5bZXh0XSZmYWxsYmFjaz1maWxlLWxvYWRlciEvVXNlcnMvYWlkYXMvRGVza3RvcC9Eb2NzL2lkZXAvc3RhdGljL2ltZy9yb2FkbWFwX3BhcGVyLnBuZyIpLmRlZmF1bHR9KSksbWR4KCJoMiIseyJpZCI6Imxvb2tpbmctYWhlYWQifSxgTG9va2luZyBBaGVhZGApLG1keCgicCIsbnVsbCxgVGhlIElERVAgTmV0d29yayBhaW1zIHRvIGJlY29tZSB0aGUgaW1wZXR1cyB0aGF0IGludHJvZHVjZXMgYW5kIHN0YW5kYXJkaXplcyBibG9ja2NoYWluIHRlY2hub2xvZ3kgaW4gdGhlIGRpZ2l0YWwgbWVkaWEgZG9tYWluLgpUaGUgSURFUCBGb3VuZGF0aW9u4oCZcyBjb21taXRtZW50IHdpbGwgbm90IHN0b3AgYXQgdGhlIGluaXRpYWwgZm91bmRhdGlvbmFsIG1vZHVsZXMgYW5kIHN0YW5kYXJkcy4gRnJvbSAzRCBpbmdhbWUgYXNzZXRzIHRvCm1lcmdpbmcgcGh5c2ljYWwgYW5kIGRpZ2l0YWwgYXNzZXRzIGludG8gYSBwZXJmZWN0IHVuaW9uLCB0aGUgdHJ1ZSBwb3RlbnRpYWwgb2YgSURFUCBpcyBlbmRsZXNzLiAgYCksbWR4KCJwIixudWxsLGBJREVQIE5ldHdvcmvigJlzIGFyY2hpdGVjdHVyZSBhbmQgaW1wbGVtZW50YXRpb24gaXMgc3RpbGwgdW5kZXJnb2luZyByYXBpZCBkZXZlbG9wbWVudCBhbmQgb3B0aW1pemF0aW9uLCB3aXRoIHF1ZXN0aW9ucyByZWdhcmRpbmcKd2hhdCBuZXcgbW9kdWxlcyB0byBjcmVhdGUsIHRvIHdoaWNoIGJyaWRnZSB3ZSBzaG91bGQgYnVpbGQgdG8gYmVzdCBoZWxwIHRoZSBuZXR3b3JrIGdyb3csIGFzIHdlbGwgYXMgdGhlIGZhc3Rlc3Qgd2F5IHRvCm9uYm9hcmQgbmV3IHByb2plY3RzIG9udG8gb3VyIExheWVyIDEuIEZvciB0aGF0IHJlYXNvbiwgd2UgaW52aXRlIGFsbCBjb21tdW5pdHkgbWVtYmVycyB0byBwcm9hY3RpdmVseSBpbml0aWF0ZSBwcm9wb3NhbHMKYW5kIHZvdGUgdG8gZnVydGhlciBvcHRpbWl6ZSBJREVQIGFuZCBidWlsZCBhIG1vcmUgcm9idXN0IGNvbW11bml0eSBhbmQgZWNvc3lzdGVtLmApLG1keCgiaHIiLG51bGwpLG1keCgicCIsbnVsbCxgVmVyc2lvbiAxLjAgIGApLG1keCgicCIsbnVsbCxgQXByaWwgMjAyMSAgYCksbWR4KCJociIsbnVsbCksbWR4KCJkaXYiLHsiY2xhc3NOYW1lIjoiYWRtb25pdGlvbiBhZG1vbml0aW9uLWNhdXRpb24gYWxlcnQgYWxlcnQtLXdhcm5pbmcifSxtZHgoImRpdiIse3BhcmVudE5hbWU6ImRpdiIsImNsYXNzTmFtZSI6ImFkbW9uaXRpb24taGVhZGluZyJ9LG1keCgiaDUiLHtwYXJlbnROYW1lOiJkaXYifSxtZHgoInNwYW4iLHtwYXJlbnROYW1lOiJoNSIsImNsYXNzTmFtZSI6ImFkbW9uaXRpb24taWNvbiJ9LG1keCgic3ZnIix7cGFyZW50TmFtZToic3BhbiIsInhtbG5zIjoiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLCJ3aWR0aCI6IjE2IiwiaGVpZ2h0IjoiMTYiLCJ2aWV3Qm94IjoiMCAwIDE2IDE2In0sbWR4KCJwYXRoIix7cGFyZW50TmFtZToic3ZnIiwiZmlsbFJ1bGUiOiJldmVub2RkIiwiZCI6Ik04Ljg5MyAxLjVjLS4xODMtLjMxLS41Mi0uNS0uODg3LS41cy0uNzAzLjE5LS44ODYuNUwuMTM4IDEzLjQ5OWEuOTguOTggMCAwIDAgMCAxLjAwMWMuMTkzLjMxLjUzLjUwMS44ODYuNTAxaDEzLjk2NGMuMzY3IDAgLjcwNC0uMTkuODc3LS41YTEuMDMgMS4wMyAwIDAgMCAuMDEtMS4wMDJMOC44OTMgMS41em0uMTMzIDExLjQ5N0g2Ljk4N3YtMi4wMDNoMi4wMzl2Mi4wMDN6bTAtMy4wMDRINi45ODdWNS45ODdoMi4wMzl2NC4wMDZ6In0pKSksYGNhdXRpb25gKSksbWR4KCJkaXYiLHtwYXJlbnROYW1lOiJkaXYiLCJjbGFzc05hbWUiOiJhZG1vbml0aW9uLWNvbnRlbnQifSxtZHgoInAiLHtwYXJlbnROYW1lOiJkaXYifSxgSURFUCBOZXR3b3JrIGlzIHVuZGVyIGhlYXZ5IGRldmVsb3BtZW50LCB0aGlzIExpdGVwYXBlciBsaWtlbHkgdG8gY2hhbmdlIGluIHRoZSBuZWFyIGZ1dHVyZSFgKSkpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}
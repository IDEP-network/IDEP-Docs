{"remainingRequest":"/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/node_modules/babel-loader/lib/index.js??ref--12-1!/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--12-3!/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/docs/Litepaper.md","dependencies":[{"path":"/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/docs/Litepaper.md","mtime":1630332374630},{"path":"/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-litepaper-md-d03.json","mtime":1632081311581},{"path":"/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/node_modules/cache-loader/dist/cjs.js","mtime":1630332960938},{"path":"/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/node_modules/babel-loader/lib/index.js","mtime":1630332960875},{"path":"/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1630332973239},{"path":"/Users/aidas/Desktop/Latest-Docs/IDEP-Docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1630332972728}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}